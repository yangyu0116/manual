<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"><html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=gb2312">
<link rel="stylesheet" href="Word2Chm.css" type="text/css">
<title> MediaController</title>
</head>
<body>     
<div class=WordSection102 style='layout-grid:15.6pt'><br clear=all
style='page-break-before:always'>

<p class=MsoNormal align=center style='text-align:center'><a
name=MediaController><b><span style='font-size:18.0pt'>MediaController</span></b></a></p>
<p class=MsoNormal align=center style='text-align:center'><span
>译者署名：</span> <span >唐明</span></p>
<p class=MsoNormal align=center style='text-align:center'><span
>版本：</span><span>Android 2.3 r1</span></p>
<p class=MsoNormal align=left style='text-align:left'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='text-align:left'><b><span
style='font-size:12.0pt;'>结构</span></b></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:21.0pt'><span
>继承关系</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><b><i><span>public class <span style='color:
#C00000'>MediaController</span> extends <span style='color:#C00000'>FrameLayout</span></span></i></b></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span>java.lang.Object</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>android.view.View</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; android.view.ViewGroup</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; android.widget.FrameLayout</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; android.widget.MediaController</span></p>
<p class=MsoNormal align=left style='text-align:left'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='text-align:left'><b><span
style='font-size:12.0pt;'>类概述</span></b></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:18.0pt'><span
lang=EN-US><img border=0 width=301 height=177
src="image/image094.png"></span></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:18.0pt'><span
lang=EN-US> </span><span >一个包含媒体播放器</span><span
lang=EN-US>(</span><span>MediaPlayer</span><span>)</span><span
>控件的视图。包含了一些典型的按钮，像</span><span>&quot;</span><span
>播放</span><span>(Play)/</span><span
>暂停</span><span>(Pause)&quot;, &quot;</span><span
>倒带</span><span>(Rewind)&quot;, &quot;</span><span
>快进</span><span>(Fast Forward)&quot;</span><span
>与进度滑动器</span><span>(progress slider)</span><span
>。它管理媒体播放器</span><span>(</span><span
class=goog-gtc-translatable><span>MediaController</span></span><span
lang=EN-US>)</span><span >的状态以保持控件的同步。</span></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:21.0pt'><span
>通过编程来实例化使用这个类。这个媒体控制器将创建一个具有默认设置的控件，并把它们放到一个窗口里漂浮在你的应用程序上。具体来说，这些控件会漂浮在通过</span><span
lang=EN-US>setAnchorView()</span><span >指定的视图上。如果这个窗口空闲</span><span
lang=EN-US>3</span><span >秒那么它将消失，直到用户触摸这个视图的时候重现。</span></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:18.0pt'><span
>当媒体控制器是在一个</span><span>XML</span><span
>布局资源文件中创建的时候，像</span><span>show()</span><span
>和</span><span> hide()</span><span
>这些函数是无效的。媒体播放器将根据这些规则去显示和隐藏：</span></p>

<ul style='margin-top:0cm' type=disc>
 <li class=MsoNormal style='text-align:left'><span >在调用</span><span
    >setPrevNextListeners()</span><span >函数之前，</span><span
    >&quot;previous&quot;</span><span >和</span><span
    > &quot;next&quot;</span><span >按钮都是隐藏的。</span></li>
 <li class=MsoNormal style='text-align:left'><span >如果</span><span
    >setPrevNextListeners()</span><span >函数被调用但传入的监听器参数是</span><span
    >null</span><span >，那么</span><span
    >&quot;previous&quot;</span><span >和</span><span
    > &quot;next&quot;</span><span >按钮是可见的但是处于禁用状态。</span></li>
 <li class=MsoNormal style='text-align:left'><span>&quot;rewind&quot;
     </span><span >和</span><span>
     &quot;fastforward&quot;</span><span >按钮是显示的，如果不需要可以使用构造函数</span><span
    >MediaController(Context, boolean)</span><span style='font-family:
     宋体'>将</span><span>boolean</span><span >设置为</span><span
    >false</span><span >。</span></li>
</ul>

<p class=MsoNormal align=left style='text-align:left'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='text-align:left'><b><span
style='font-size:12.0pt;'>公共方法</span></b></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public boolean <b>dispatchKeyEvent</b>
(KeyEvent event)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>在焦点路径上分发按钮事件到下一个视图。该路径从视图树的顶端遍历到当前获得焦点的视图。如果当前视图已获得焦点，就分发给自身。否则，就分发到下一个节点的焦点路径上</span><span
class=normal2><span style='font-size:11.0pt;'>。这个方法也可以激发任何一个按键消息监听器。</span></span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>event &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
>被分发的事件</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >返回值</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span >如果这个事件被处理了返回</span><span
lang=EN-US>true</span><span >，否则返回</span><span
lang=EN-US>false</span><span >。</span><span> </span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>hide</b> ()</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>从屏幕中移除控制器。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public boolean <b>isShowing</b> ()</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>（译者注：</span><span >判断媒体控制器是否处于可见状态。</span><span
>）</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>onFinishInflate</b> ()</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>XML</span><span >文件加载视图完成时调用。这个函数在加载的最后阶段被调用，所有的子视图已经被添加。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>即使子类重写了</span><span>onFinishInflate</span><span
>方法，也应该始终确保调用父类方法，以便我们调用。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public boolean <b>onTouchEvent</b>
(MotionEvent event)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>实现这个方法来处理触摸屏幕引发的事件。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>event &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
>动作事件</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >返回值</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span >如果这个事件被处理了返回</span><span
lang=EN-US>true</span><span >，否则返回</span><span
lang=EN-US>false</span><span >。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public boolean <b>onTrackballEvent</b>
(MotionEvent ev)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>实现这个方法处理轨迹球的动作事件，轨迹球相对运动的最后一个事件能用</span><code><span
lang=EN-US style='font-size:12.0pt'><a target="_blank" href="http://developer.android.com/reference/android/view/MotionEvent.html#getX%28%29"><span
style='font-size:10.5pt;font-family:"Calibri","sans-serif"'>MotionEvent.getX()</span></a></span></code><span
lang=EN-US> </span><span >和</span> <code><span
lang=EN-US style='font-size:12.0pt'><a target="_blank" href="http://developer.android.com/reference/android/view/MotionEvent.html#getY%28%29"><span
style='font-size:10.5pt;font-family:"Calibri","sans-serif"'>MotionEvent.getY()</span></a></span></code><span
>函数获取。这些都是标准化的，用</span><span>1</span><span
>表示用户按下一个</span><span>DPAD</span><span
>按键。（因此他们将经常使用小数值表示，为轨迹球提供更多的的细微运动信息）</span> <span
>（译者注：</span><span>DPAD</span><span
>按键事件</span><span>:
KeyEvent.KEYCODE_DPAD_CENTER</span><span >（居中）、</span><span
lang=EN-US>KeyEvent.KEYCODE_DPAD_DOWN</span><span >（向下）、</span><span
lang=EN-US>KeyEvent.KEYCODE_DPAD_LEFT</span><span >（向左）、</span><span
lang=EN-US>KeyEvent.KEYCODE_DPAD_RIGHT</span><span >（向右）、</span><span
lang=EN-US>KeyEvent.KEYCODE_DPAD_UP</span><span >（向上）作比较。分别表示居中、下移、左移、右移、上移的操作。</span>
<span >相关链接：</span><span><a target="_blank" href="http://book.51cto.com/art/201010/231849.htm">onTrackBallEvent<span
lang=EN-US ><span>方法简介</span></span></a></span><span
>）</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:63.0pt;text-align:left;
text-indent:21.0pt'><span>ev &nbsp;&nbsp; </span><span
>动作事件</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >返回值</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
>如果这个事件被处理了返回</span><span>true</span><span
>，否则返回</span><span>false</span><span
>。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>setAnchorView</b> (View
view)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>设置这个控制器绑定</span><span>(anchor/</span><span
>锚</span><span>)</span><span style='font-family:
宋体'>到一个视图上。例如可以是一个</span><span>VideoView</span><span
>对象，或者是你的</span><span>activity</span><span
>的主视图。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>view &nbsp; </span><span class=longtext><span
>将视图来绑定控制器时可见</span></span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>setEnabled</b> (boolean
enabled)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>设置视图对象的有效状态。这也可以改变子类的有效状态。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>enabled  </span><span style='font-family:
宋体'>如果要让这个视图对象可用就设置为</span><span>true</span><span style='font-family:
宋体'>，否则设置为</span><span>false</span><span >。</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>setMediaPlayer</b>
(MediaController.MediaPlayerControl player)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>（译者注：</span><span >把这个媒体控制器设置到</span><span
lang=EN-US>VideoView</span><span >对象上。</span><span
>）</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>setPrevNextListeners</b>
(View.OnClickListener next, View.OnClickListener prev)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>（译者注：设置</span><span>&quot;previous&quot;</span><span
>和</span><span> &quot;next&quot;</span><span
>按钮的监听器函数。）</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>show</b> (int timeout)</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>在屏幕上显示这个控制器。它将在闲置</span><span>’</span><span
>超时</span><span> (timeout)’</span><span
>毫秒到达后自动消失。</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left;
text-indent:21.0pt'><span >参数</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>timeout  </span><span style='font-family:
宋体'>这个参数以毫秒为单位。如果设置为</span><span>0</span><span style='font-family:
宋体'>将一直显示到调用</span><span>hide()</span><span >函数为止。</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left;
text-indent:21.0pt'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
lang=EN-US style='background:#D9D9D9'>public void <b>show</b> ()</span></p>
<p class=MsoNormal align=left style='margin-left:21.0pt;text-align:left'><span
>在屏幕上显示这个控制器。它将在</span><span>3</span><span
>秒以后自动消失。</span></p>
<p class=MsoNormal align=left style='text-align:left'><span>&nbsp;</span></p>
<p class=MsoNormal align=left style='text-align:left'><b><span
style='font-size:12.0pt;'>补充</span></b></p>
<p class=MsoNormal align=left style='text-align:left;text-indent:21.0pt'><span
>文章精选</span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left'><span
lang=EN-US>[</span><span >推荐</span><span>]<a target="_blank" href="http://android.yaohuiji.com/archives/tag/mediacontroller">[Android<span
lang=EN-US ><span>学习指南</span></span>]Android<span
lang=EN-US ><span>多媒体</span></span>(Media)</a></span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left'><span
lang=EN-US><a target="_blank" href="http://marshal.easymorse.com/archives/2043"><span
lang=EN-US ><span>调用</span></span>android api<span
lang=EN-US ><span>播放视频</span></span></a></span></p>
<p class=MsoNormal align=left style='margin-left:42.0pt;text-align:left'><span
lang=EN-US><a target="_blank" href="http://www.igniu.com/?p=60">Customize android VideoView
(ii)</a></span></p>
<p class=MsoNormal style='margin-left:21.0pt;text-indent:21.0pt'><span
lang=EN-US>&nbsp;</span></p>

</div>

<b><span style='font-size:22.0pt;font-family:"Calibri","sans-serif"'><br
clear=all style='page-break-before:auto'>
</span></b>

      
</body>
</html>
